// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"github.com/jason0x43/go-alfred"
	"toggl_time_entry_manipulator/client"
	"toggl_time_entry_manipulator/command/add"
	"toggl_time_entry_manipulator/command/continue_entry"
	delete2 "toggl_time_entry_manipulator/command/delete"
	"toggl_time_entry_manipulator/command/get"
	"toggl_time_entry_manipulator/command/list"
	"toggl_time_entry_manipulator/command/modify"
	"toggl_time_entry_manipulator/command/stop"
	"toggl_time_entry_manipulator/repository"
)

// Injectors from wire.go:

func initializeCommands(workflow alfred.Workflow, firstCall bool) ([]alfred.Command, error) {
	cacheFile := NewCacheFile(workflow)
	cache, err := NewCache(cacheFile)
	if err != nil {
		return nil, err
	}
	configFile := NewConfigFile(workflow)
	config, err := NewConfig(configFile)
	if err != nil {
		return nil, err
	}
	togglConfig := config.TogglConfig
	iTogglClient := client.NewTogglClient(togglConfig)
	clientOption, err := NewServiceAccount(workflow)
	if err != nil {
		return nil, err
	}
	firestoreConfig := config.FirestoreConfig
	iEstimationClient, err := client.NewEstimationClient(clientOption, firestoreConfig)
	if err != nil {
		return nil, err
	}
	iTimeEntryRepository := repository.NewTimeEntryRepository(iTogglClient, iEstimationClient)
	cachedRepository := repository.NewCachedRepository(cache, iTimeEntryRepository)
	workflowConfig := config.WorkflowConfig
	addEntryCommand := add.NewAddEntryCommand(cachedRepository, workflowConfig)
	listEntryCommand := list.NewListEntryCommand(cachedRepository, workflowConfig)
	getEntryCommand := get.NewGetEntryCommand(cachedRepository)
	modifyEntryCommand := modify.NewModifyEntryCommand(cachedRepository, workflowConfig)
	stopEntryCommand := stop.NewStopEntryCommand(cachedRepository)
	deleteEntryCommand := delete2.NewDeleteEntryCommand(cachedRepository)
	continueEntryCommand := continue_entry.NewContinueEntryCommand(cachedRepository)
	v := NewCommands(firstCall, addEntryCommand, listEntryCommand, getEntryCommand, modifyEntryCommand, stopEntryCommand, deleteEntryCommand, continueEntryCommand)
	return v, nil
}
